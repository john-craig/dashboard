@use "sass:math";
@use "sass:map";

$vanishing-height: 50vh;
$vanishing-width: 50vw;

@function slope($xPos, $yPos){
    $slope: 0;

    @if($xPos - $vanishing-width == 0){
        $slope: undefined;
    } @else {
        $slope: (($yPos - $vanishing-height) / 1vh) / (($xPos - $vanishing-width) / 1vw);
    }

    @return $slope;
}

@function hypotenuse($xPos, $yPos, $distance){
    $slope: slope($xPos, $yPos);
    $hypotenuse: math.sin($slope) * $distance;

    @return $hypotenuse
}

@function opposite($xPos, $yPos){
    $slope: slope($xPos, $yPos);
    $opposite: math.tan($slope) * 100%;

    @return $opposite;
}

@function relative-slope($xPos, $yPos, $width, $height){
    $xOrigin: 0;
    $yOrigin: 0;

    @if($xPos < $vanishing-width and $xPos + $width > $vanishing-width ){
        $xOrigin: $xPos + ($width / 2);
    } @else{
        @if($xPos < $vanishing-width){
            $xOrigin: $xPos;
        } @else {
            $xOrigin: $xPos + $width;
        }
    }

    @if($yPos < $vanishing-height and $yPos + $height > $vanishing-height ){
        $yOrigin: $yPos + ($height / 2);
    } @else{
        @if($yPos < $vanishing-height){
            $yOrigin: $yPos;
        } @else {
            $yOrigin: $yPos + $height;
        }
    }

    @return slope($xOrigin, $yOrigin);
}

//To Do:
/*
    Basically, I'm going to need a series of functions like...
        getPoint1X
        getPoint1Y

        getPoint2X
        getPoint2Y

        getPoint3X
        getPoint3Y

        getPoint4X
        getPoint4Y
    with each being able to accept the X, Y, width, height, and distance of a perspective trapezoid
    and being able to return the corresponding position of each corner of that trapezoid
    which can then be plugged into the perspective-edges mixin below
*/

@function perspective-corners($xPos, $yPos, $width, $height){
    $corners: (
        p1: (
            x: 0%,
            y: 0%
        ),
        p2: (
            x: 100%,
            y: 0%
        ),
        p3: (
            x: 100%,
            y: 100%
        ),
        p4: (
            x: 0%,
            y: 100%
        )
    );

    $slope: relative-slope($xPos, $yPos, $width, $height);
    //$slope: slope($xPos, $yPos);

    @if($slope < 1 or $slope > -1){
        @if($xPos < $vanishing-width){
            //Left quadrant
            //p2y and p3y
            $p2y: map.get($corners, p2, y) + opposite($xPos, $yPos);
            $p3y: map.get($corners, p3, y) + opposite($xPos, $yPos + $height);

            $corners: map.set($corners, p2, y, $p2y);
            $corners: map.set($corners, p3, y, $p3y);
        } @else {
            //Right quadrant
            //p1y and p4y
            $p1y: map.get($corners, p1, y) - opposite($xPos + $width, $yPos);
            $p4y: map.get($corners, p4, y) - opposite($xPos + $width, $yPos + $height);

            $corners: map.set($corners, p1, y, $p1y);
            $corners: map.set($corners, p4, y, $p4y);
        }
    }

    @if($slope > 1 or $slope < -1){
        @if($yPos < $vanishing-height){
            //Upper quadrant
            //p4x and p3x
            $p4x: map.get($corners, p4, x) - opposite($xPos, $yPos);
            $p3x: map.get($corners, p3, x) - opposite($xPos + $width, $yPos);

            $corners: map.set($corners, p4, x, $p4x);
            $corners: map.set($corners, p3, x, $p3x);
        } @else {
            //Bottom quadrant
            //p1x and p2x
            $p1x: map.get($corners, p1, x) + opposite($xPos, $yPos + $height);
            $p2x: map.get($corners, p2, x) + opposite($xPos + $width, $yPos + $height);

            $corners: map.set($corners, p1, x, $p1x);
            $corners: map.set($corners, p2, x, $p2x);
        }
    }

    // @if($slope == undefined){
    //     //Exactly vertical
    // }

    // @if($slope == 0){
    //     //Exactly horizontal
    // }

    @return $corners;
}

@function perspective-dimensions($xPos, $yPos, $width, $height){
    $dimensions: (
        width: $width,
        height: $height
    );

    @if($xPos < $vanishing-width){
        @if($yPos < $vanishing-height){
            //Upper-left quadrant
        } @else {
            //Lower-left quadrant
        }
    } @else{
        @if($yPos < $vanishing-height){
            //Upper-right quadrant
        } @else {
            //Lower-right quadrant
        }
    }

    @return $dimensions;
}

@function perspective-positions($xPos, $yPos, $width, $height){
    $positions: (
        x: $xPos,
        y: $yPos
    );

    @if($xPos < $vanishing-width){
        @if($yPos < $vanishing-height){
            //Upper-left quadrant
        } @else {
            //Lower-left quadrant
        }
    } @else{
        @if($yPos < $vanishing-height){
            //Upper-right quadrant
        } @else {
            //Lower-right quadrant
        }
    }

    @return $positions;
}

@function perspective-coordinates($xPos, $yPos, $width, $height){
    @return (
        positions: perspective-positions($xPos, $yPos, $width, $height),
        dimensions: perspective-dimensions($xPos, $yPos, $width, $height),
        corners: perspective-corners($xPos, $yPos, $width, $height)
    );
}


@mixin perspective-edges($xPos, $yPos, $width, $height) {
    $coordinates: perspective-coordinates($xPos, $yPos, $width, $height);

    clip-path: polygon(
            map.get($coordinates, corners, p1, x) map.get($coordinates, corners, p1, y),
            map.get($coordinates, corners, p2, x) map.get($coordinates, corners, p2, y),
            map.get($coordinates, corners, p3, x) map.get($coordinates, corners, p3, y),
            map.get($coordinates, corners, p4, x) map.get($coordinates, corners, p4, y)
        );
    top: map.get($coordinates, positions, y);
    left: map.get($coordinates, positions, x);
    width: map.get($coordinates, dimensions, width);
    height: map.get($coordinates, dimensions, height);
    
}